{"pages":[{"title":"关于","text":"欢迎来到我的个人博客！ 快速说明本网站基于 Hexo+icarus+Amazing 搭建而成. 这个博客仍在搭建中. 感谢您的访问！","link":"/about/index.html"},{"title":"留言板","text":"欢迎留言！ PS：该留言功能需要 Github 账号登录后评论。","link":"/message/index.html"},{"title":"标签","text":"","link":"/tags/index.html"}],"posts":[{"title":"Mybatis","text":"本文记录 Mybatis 学习笔记。 1.1 传递 pojo 对象mybatis 使用 ognl 表达式解析对象字段的值，#{}或者${}括号中的值为 pojo 属性名称。 OGNL 表达式 Object Graphic Navigation Language 对象 图 导航 语言 12345它是通过对象的取值方法来获取数据，在写法上把get给省略了。e.g. 我们获取用户的名称 类中的写法：user.getUsername(); OGNL表达式写法：user.username Mybatis 中为什么能直接写 username，而不用 user.呢：因为在 parameterType 中已经提供了属性所属的类，所以此时不需要写对象名。 1.2 resultMap 标签及内部标签参数resultMap 包含的元素： 12345678910111213141516&lt;!--column不做限制，可以为任意表的字段，而property须为type 定义的pojo属性--&gt;&lt;resultMap id=&quot;唯一的标识&quot; type=&quot;映射的pojo对象&quot;&gt; &lt;id column=&quot;表的主键字段，或者可以为查询语句中的别名字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;映射pojo对象的主键属性&quot; /&gt; &lt;result column=&quot;表的一个字段（可以为任意表的一个字段）&quot; jdbcType=&quot;字段类型&quot; property=&quot;映射到pojo对象的一个属性（须为type定义的pojo对象中的一个属性）&quot;/&gt; &lt;!-- association是用于一对一和多对一，--&gt; &lt;association property=&quot;pojo的一个对象属性&quot; javaType=&quot;pojo关联的pojo对象&quot;&gt; &lt;id column=&quot;关联pojo对象对应表的主键字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;关联pojo对象的主键属性&quot;/&gt; &lt;result column=&quot;任意表的字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;关联pojo对象的属性&quot;/&gt; &lt;/association&gt; &lt;!-- 而collection是用于一对多的关系 --&gt; &lt;!-- 集合中的property须为oftype定义的pojo对象的属性--&gt; &lt;collection property=&quot;pojo的集合属性&quot; ofType=&quot;集合中的pojo对象&quot;&gt; &lt;id column=&quot;集合中pojo对象对应的表的主键字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;集合中pojo对象的主键属性&quot; /&gt; &lt;result column=&quot;可以为任意表的字段&quot; jdbcType=&quot;字段类型&quot; property=&quot;集合中的pojo对象的属性&quot; /&gt; &lt;/collection&gt;&lt;/resultMap&gt; 参考链接_Mybatis：resultMap 的使用总结 1.3 注解开发123456789101112131415161718192021@Select@Insert@Update@Delete@Results(id=&quot;userMap&quot;, value={ // @Result(id=&quot;&quot;, property=&quot;&quot;, column=&quot;&quot;), // @Result(property=&quot;&quot;, column=&quot;&quot;), @Result(property=&quot;&quot;, column=&quot;&quot;) @Result(property = &quot;accounts&quot;,column = &quot;id&quot;, many = @Many(select = &quot;com.itheima.dao.IAccountDao.findAccountByUid&quot;,fetchType = FetchType.LAZY)) @Result(property = &quot;user&quot;,column = &quot;uid&quot;,one=@One(select=&quot;com.itheima.dao.IUserDao.findById&quot;,fetchType= FetchType.EAGER))})@ResultMap(value={&quot;userMap&quot;})//此标签需要在SqlMapConfig.xml配置cacheEnabled@CacheNamespace(blocking=true) 相关链接1、Mybatis 入门","link":"/2021/02/01/Mybatis/"},{"title":"github-将本地仓库上传到远程仓库-步骤","text":"本文说明使用 Git 将远程仓库的文件克隆到本地以及将更新后的本地文件上传到远程仓库，方便进行代码版本管理。 （一）环境配置//TODO （二）将远程仓库克隆到本地//TODO （三）将更新后的本地文件上传到远程仓库1、本文件夹未上传过//TODO 2、本文件夹之前已上传过多次在已经初始化的本地文件夹（含有.git 文件夹和 README.md）， 鼠标右键点击 Git Bash Here，随后输入命令 12345# 添加所有文件git add .git commit -m &quot;您对本次提交所要说明的一些文本内容&quot;# 推送文件git push","link":"/2021/02/04/github-%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E4%B8%8A%E4%BC%A0%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93-%E6%AD%A5%E9%AA%A4/"},{"title":"javaWeb 四大域对象总结","text":"本文记录 javaWeb 中四大域的对象总结。四个域的作用域范围大小:PageContext （page 域） &lt; request &lt; session &lt; servletContext（application 域） 一、ServletContext1、生命周期当 Web 应用被加载进容器时创建代表整个 web 应用的ServletContext 对象， 当服务器关闭或 Web 应用被移除时，ServletContext 对象跟着销毁。 2、作用范围整个 Web 应用。 3、作用：(a) 在不同 Servlet 之间转发this.getServletContext().getRequestDispatcher(&quot;/servlet/Demo10Servlet&quot;) .forward(request,response); 方法执行结束，service 就会返回到服务器，再有服务器去调用目标 servlet，其中 request 会重新创建，并将之前的 request 的数据拷贝进去。 (b) 读取资源文件。（1）由于相对路径默认相对的是 java 虚拟机启动的目录， 所以我们直接写相对路径将会是相对于 tomcat/bin 目录，所以是拿不到资源的。 如果写成绝对路径，当项目发布到其他环境时，绝对路径就错了。 （2）为了解决这个问题 ServletContext 提供了：this.getServletContext().getRealPath(“/1.properties”)给进一个资源的虚拟路径，将会返回该资源在当前环境下的真实路径。this.getServletContext().getResourceAsStream(“/1.properties”)给一个资源的虚拟路径返回到该资源真实路径的流。 （3）当在非 servlet 下获取资源文件时，就没有 ServletContext 对象用了，此时只能用类加载器classLoader.getResourceAsStream(“../../1.properties”)此方法利用类加载器直接将资源加载到内存中，有更新延迟的问题，以及如果文件太大，占用内存过大。 classLoader.getResource(“../1.properties”).getPath()，直接返回资源的真实路径，没有更新延迟的问题。 二、Request 域1、生命周期在 service 方法调用前由服务器创建，传入 service 方法。整个请求结束，request 生命结束。 2、作用范围整个请求链（请求转发也存在）。 3、作用在整个请求链中共享数据。最常用到：在 Servlet 中处理好的数据交给 Jsp 显示，此时参数就可以放置在 Request 域中带过去。 三、Session 域HttpSession 在服务器中，为浏览器创建独一无二的内存空间，在其中保存会话相关的信息。 1、生命周期在第一次调用 request.getSession() 方法时，服务器会检查是否已经有对应的 session,如果没有就在内存 中创建一个 session 并返回。 当一段时间内 session 没有被使用（默认为 30 分钟），则服务器会销毁该 session。 如果服务器非正常关闭（强行关闭），没有到期的 session 也会跟着销毁。 如果调用 session 提供的 invalidate（），可以立即销毁 session。 注意：服务器正常关闭，再启动，Session 对象会进行钝化和活化操作。同时如果服务器钝化的时间在 session 默认销毁时间之内，则活化后 session 还是存在的。否则 Session 不存在。如果 JavaBean 数据在 session 钝化时，没有实现 Serializable 则当 Session 活化时，会消失。 2、作用范围一次会话。 四、PageContext 域1、生命周期当对 JSP 的请求时开始，当响应结束时销毁。 2、作用范围整个 JSP 页面，是四大作用域中最小的一个，即超过这个页面就不能够使用了。(所以使用 pageContext 对象向其它页面传递参数是不可能的.) 3、作用（1）获取其它八大隐式对象，可以认为是一个入口对象。（2）获取其所有域中的数据pageContext 操作所有域中属性的方法 public java.lang.Object getAttribute(java.lang.String name,intscope) public void setAttribute(java.lang.String name, java.lang.Objectvalue,int scope) public void removeAttribute(java.lang.String name,int scope) pageContext 中代表域的常量 PageContext.APPLICATION_SCOPE PageContext.SESSION_SCOPE PageContext.REQUEST_SCOPE PageContext.PAGE_SCOPE findAttribute 方法,在四大域中搜寻属性，搜寻的顺序是 page 域、request 域、session 域、application 域， 从小域到大域开始搜索，如果搜索到就直接获取该值，如果所有域中都找不到，返回一个 null(与 el 表达式不同，此处返回 null，对网页是不友好的) （3）跳转到其他资源其身上提供了 forward 和 include 方法，简化重定向和转发的操作。","link":"/2021/02/18/javaWeb-%E5%9B%9B%E5%A4%A7%E5%9F%9F%E5%AF%B9%E8%B1%A1%E6%80%BB%E7%BB%93/"},{"title":"java中的静态代码块","text":"本文详细说明 java 静态代码块。 静态代码块执行优先级高于非静态的初始化块。 它会在类初始化的时候执行一次且只执行一次，执行完成便销毁。 它仅能初始化类变量，即 static 修饰的数据成员，使得不需要每次调用这个变量时都给它赋值。 非静态代码块执行的时候如果有静态初始化块，先执行静态初始化块再执行非静态初始化块。 在每个对象生成时都会被执行一次，它可以初始化类的实例变量。 非静态初始化块会在构造函数执行时，在构造函数主体代码执行之前被运行。 静态与非静态代码块的写法1234567891011121314public class Fathers{ static{ //此处写静态代码块 } { //此处写非静态代码块 } Fathers(){ //构造函数 } public static void main(String[] args){ //TODO }} 扩展知识继承中的静态与非静态执行顺序 首先定义父类和子类 12345678910111213141516171819202122232425262728293031class Fathers{ static{ System.out.println(&quot;1-父类-静态&quot;); } { System.out.println(&quot;2-父类-非静态&quot;); } Fathers(){ System.out.println(&quot;3-父类-构造&quot;); } public static void main(String[] args){ System.out.println(&quot;4-父类-main&quot;); new Sons(); }}class Sons extends Fathers{ static{ System.out.println(&quot;5-子类-静态&quot;); } { System.out.println(&quot;6-子类-非静态&quot;); } Sons(){ System.out.println(&quot;7-子类-构造&quot;); } public static void main(String[] args){ System.out.println(&quot;8-子类-main&quot;); new Sons(); }} 一 在子类中执行 main 方法结果如下： 12345671-父类-静态5-子类-静态8-子类-main2-父类-非静态3-父类-构造6-子类-非静态7-子类-构造 二 在父类中执行 main 方法结果如下： 12345671-父类-静态4-父类-main5-子类-静态2-父类-非静态3-父类-构造6-子类-非静态7-子类-构造 三 更直观的结果-在父类中 new 两次子类对象在父类 main 函数中修改代码为： 123456public static void main(String[] args){ System.out.println(&quot;4-父类-main&quot;); new Sons(); System.out.println(&quot;-----&quot;); new Sons();} 结果如下： 1234567891011121-父类-静态4-父类-main5-子类-静态2-父类-非静态3-父类-构造6-子类-非静态7-子类-构造-----2-父类-非静态3-父类-构造6-子类-非静态7-子类-构造 结论TODO 参考链接：java 中静态代码块详解","link":"/2021/02/08/java%E4%B8%AD%E7%9A%84%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/"},{"title":"spring","text":"本文记录有关 spring 框架的问题。","link":"/2021/02/07/spring/"},{"title":"locked","text":"9c714c0349eaee570b3793f1cb818397156b1690216767287d4a2792e9eb6f77a042dd447481db6c49742549b83c6fc2c5653397fde232c345c64507cde4a7da309bafcf79183938fb643e724ccf8504112cb53d0d3f16fac724dd8c99936d0e0bebed7f3b5689d938575db952e0c89d4c1928c8ea533d0925bc6e24e59d82b955fc362d618d73aa8cf34528016d28fda5bcb495ac8eb22974c523213469a6af099b0a085909002f7dd6643d1b249d468572cc8ba6c99e39b6ea72e9c98e0bd6ba19024d3e599fd0430e780fdb0f2f01f45c17171c7a4043771af069d7d68cb1dd87faff5ef136c94a62e6e437ba0cdd7d86d60a7a3cca46d0b85c3760f05a0ed2ba68e5aa1d0a1fa467d216230628ffca31c87e1e23cb06ac24b2f8a95471486684fc833a4e873e855b10a55972038d9db6ec8f14f5d9b4c876acb29a55ed68549e192cbf4187439250b659e9b9a365315c06ddc563d049ad5aa6019bb5820f4dce8be5f273ad545efbed6df2950b6fe81b337d07bdb282b4a570e0ebbe0eb167aa3bdd8d44f50ca8b4e45112a681a1e33fe42703401a996ce20b1675db10cad849e6afef287a9337fcac658bb5e60230bfe3078ad6efb38495d2bb2241f36e8c365bf521e3129dc6b5b2380ef4d20c5024faa2a0dfa8d75e8a9a5196e607be246bc15de9b9ecdc3651a7647fb28c6f70fd59335eead3ba8131a9a78b8eb5581278e081938d424678e707b4bb5d899893166d6fea64fae6bcdc21a75bebfeb727487dc2e89dc722e0aad2b38d6672783d59c7b0a434644c15aedc8643329caf5520db03ea0062a8661db52309525b721c4a2c35634bd0a13094b88a6a57099cd9d92a790bb42a758ad501c28b7a76f123635fad51dee4e7bb001a891023aa4d2149293f1fa938cfc6c992f3f9815bf673caf0c5f66732dfff89e35439eba2ba1a4475bd0e0c922abaa19f4c7b81dad17f96145d0cddfe54198593e063c18f888271873aab0f3dbaf77f5408e7e7305fe262e53e4ac3470f42c530ec59c68646e18524d9e34b2ebd4dc186677ee2187bf04258c75731ed59082d80173d8cb73e1b18e79496e6a72beb2c4ba86141664b78d3a0ac7ddb1d400de303c8cce8144eb2c38964c6eadd5082cc94b8bf6a09724d8cf4cd85020bad1173a824f25799625ffcb184b58493b020d35839b771c6751ddc314786615c503694555fa4ca4861041970e0b926776d472bdb6a5da7e75753034665de646fd716b35c7884c158779cdc6a85feb32edcfeee531aa94ccb1538b1f73a9a7aefa53a09b9c63cc256ef8736645243dcf3daf3c2ef577bd48d714de497b18ec63f28d08e177bf283689b1f6e5bede18a8bb2bef34f68c0642c592d283ccf9e1bba7aa04ea330c49fc33650a7c40aeadfcb5ab64aed82acf08c29bd59e0642ccecaa672829d77f649549f33bcd59d8ad591be6f76c66d3f13acead6bf99d06035b307c818cf00bfa72d3837ea23b92c0c8327ed041ddca5e6a524ad7cb32a2ccbb5600581dd2dfacc2f00c83fff63134d0ec30e4649ba7922279ccc6a49bc7cb10515a5f34e96ed94d435b665b67cc20e4580b2500d522141ff322b2637188d9a091353f5752bfc51040e8951e6fd1462758fffc10ab90082a6fac40c21daa08b72b9e2cfab0dde1f9921d145dcfcc8499c74ea9d05888b61d84ea17f593828da81406507811cc87e62d88f27449356d3d74675d0b17878db5c3bb7206802e2063bae01d3c9edee6bb65fc0685c5b0b50c009bbc7c2d54eb50e920f590732dae1843350c8c1145c3bc49e96e0f00f6d67c15fbffb747553da1f82e1b81cf82ef6c030810379ee22892fee22166bfc0909402170bff99a7f5a98deb37b1d157f00f1776e46074b99e8240c2cd0c89ca720b82165fcfde275766e55f1a3ca3ab7e4628be495b0d9a78ed3cb949aca60e22e92a54d8bbeed2b08417c6ea668a65e2861847c2c11dc1e071a7c56ad96cb1de91b5b5a889da72469e5c04cf3ce5e1d05da761a81ed9d7ad6d5057c9818b45172fc1280296e5b45bca3624d24c79ec085474507129559d5197d00f77e6507f7c99c4142003f1e6bf0759686e39705e2eaf1bfda902af99abe6476a95eb106764f20bdb204873126ac3f15611a05d5e808f8f35abf38fe149887cbe2c7ca1502d6a6364efb50558a2aceb3d42d2ff2e25f6da152a9c829b996c08fce9e9beec808c7d051c13ecca97972f72efdc6e7a10531153f8480f2406c9a53999d2cc32c27208e2e73f57b5a4e5df790be9b023bc85768e223e4e92f6d0afc047e1d943888457b1fdb6a5bf5c16e968aa77db11d76698207c908f3cc760eef7e1150e9b28c40cb8ef8893eaba002c5039ecb3a1a2da4c5af16659faef760013e36596e7bb22436e579b7e36f6a8c8e8defde09a8f0efce243bbed795e3182ee931de78a0f7b55f299054e4a4b81ce924dc38479d8a181d67f36822cb73834f8c01bacc2c525b88f3260fe21b8375e45343b3bf366584f3159bc22c6bf77af9fab47d7a28130ad7aa51dbd3108a527e34b5591142e8bae514641491349cf5ef227cb55387261c371ef0a46b7c4d43b46697ec822a0b38b3792fd3de095f75583d73f88a843f40896d0c6028dd53c983da3af1e60937515c08322d94fc457c65c1c56f7990430b1f76d224119d8af071fcaacc5de225f5b494c33006a906bfe71f8bd83803d1c5f608fdc87db4007de04cd4f9895edbb8c2b8ce295ec2548b2819e4025b58a9d44d0a2fe307a8d266b760de9685e465721482cc7ef10908ade3a584033bf814b1d773cfd6c9f8ab6c99bc3918ece4aa27412c8c2432b86b3c5594fc81cad23c86c26e71b414949d54d3a3778864cd0588a5706bc13d840ebd1714edd17ea1f953320c2860b0bcf7b4b2b9040bb0643de44fa91f434bbabb399b 您好，这里需要密码。","link":"/2021/02/05/locked/"},{"title":"基于Hexo+Icarus+Gitee搭建个人博客","text":"本文说明在 windows 电脑搭建个人博客并托管到 Gitee 的步骤。 名词解释：Hexo，一个著名的静态博客框架。 第一步：配置环境一、安装 NodeJs1.下载 Node.Js：官网地址 2.打开命令行界面，输入如下命令查看 12345678# 确认node.js安装成功：运行下面两个命令打印版本号即可node -vnpm -v# 安装 Node.js 淘宝镜像加速器 （cnpm）npm install -g cnpm --registry=https://registry.npm.taobao.org# 查看淘宝镜像下载源cnpm是否安装成功cnpm -v 二、安装 Hexo3.在命令行界面输入如下命令 1234# 全局安装cnpm install hexo-cli -g# 查看hexo版本hexo -v 三、创建本地博客站点余下待完善 参考链接1、B 站 UP 主 CodeSheep视频。该视频演示了在 Mac 电脑上搭建个人博客并托管到 GitHub 上的全部步骤，评论中也有许多大佬留下了自己的博客地址和一些参考做法。此外，该 UP 主也发布了一些其他的静态博客框架搭建的视频，可供参考。2、","link":"/2021/01/31/%E5%9F%BA%E4%BA%8EHexo+Icarus+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"基于java的jsoup爬取俄语论坛评论","text":"本文记录如何使用 jsoup 爬取俄语网站，其实质内容与爬取任何一个中文网站无差别。 语法知识//TODO 源代码//TODO 参考链接 1.Java 爬取网页内容的简单例子记录了 select 的部分语法 2.Java 爬虫】使用 Jsoup 爬取网页 table 标签表格的分页信息 3.使用 jsoup 对 HTML 文档进行解析和操作","link":"/2021/02/16/%E5%9F%BA%E4%BA%8Ejava%E7%9A%84jsoup%E7%88%AC%E5%8F%96%E4%BF%84%E8%AF%AD%E8%AE%BA%E5%9D%9B%E8%AF%84%E8%AE%BA/"},{"title":"深度学习引论","text":"本文记录 2020 年秋学期 四川大学 章毅老师 的 深度学习引论 的课程总结。 一 Introduction to Deep Neural Networks人工智能概念一个例子：手写数字识别作业 二 Network Structure神经元的计算模型神经网络的计算模型 三 Backpropagation Algorithm损失函数最速梯度法反向传播算法 四 手写数字识别network training steps编程实现手写数字识别算法 五 手写数字识别 Ⅱ（目标输出为音频）on some problems of BP编程实现手写数字识别算法（目标输出为音频） 六 unsupervised learninglearning in neural networkssupervised learningunsupervised learningautoencoder neural networksgenerative adversarial networks 七 A Sequence Recognizing ExampleReview of BP for Mono-target Output NNsBP Method for Multi-target Outputs NNsBP algorithm for Multi-target Outputs NNsIllustrative Examples 结课作业 街景数字识别原理同四，下为代码。","link":"/2021/01/31/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%BC%95%E8%AE%BA/"}],"tags":[{"name":"Mybatis","slug":"Mybatis","link":"/tags/Mybatis/"},{"name":"java","slug":"java","link":"/tags/java/"},{"name":"github","slug":"github","link":"/tags/github/"},{"name":"Servlet","slug":"Servlet","link":"/tags/Servlet/"},{"name":"spring","slug":"spring","link":"/tags/spring/"},{"name":"locked","slug":"locked","link":"/tags/locked/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"gitee","slug":"gitee","link":"/tags/gitee/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"jsoup","slug":"jsoup","link":"/tags/jsoup/"},{"name":"DeepLearning","slug":"DeepLearning","link":"/tags/DeepLearning/"}],"categories":[{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"Summary","slug":"Summary","link":"/categories/Summary/"},{"name":"java","slug":"java","link":"/categories/java/"},{"name":"locked","slug":"locked","link":"/categories/locked/"},{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"爬虫","slug":"爬虫","link":"/categories/%E7%88%AC%E8%99%AB/"}]}